<style>
  .custom-table-color th {
    color: dodgerblue;
  }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.css">
<link rel="stylesheet" href="https://cdn.datatables.net/1.10.19/css/dataTables.bootstrap4.min.css">

<!--<script src="https://code.jquery.com/jquery-3.3.1.js"></script>-->
<script src="https://unpkg.com/tippy.js@4"></script>
<script src="https://unpkg.com/popper.js@1"></script>

<script src="//cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.10.19/js/dataTables.bootstrap4.min.js"></script>


<div class="row justify-content-md-center">
  <div class="row col col-lg-12 col-md-12">
    <h1 class="p-3 pb-5">Data Sets</h1>
  </div>

  <div class="row col col-lg-12 col-md-12">

    <div class="col col-lg-4 col-md-4">

      <div>
        <button type="button" class="btn btn-outline-primary btn-lg" id="button-create-new-data-set">Create Data Set
        </button>
      </div>
      <br>

      <div class="form-group">
        <label for="label-cluster">
          <h4>
            Title
          </h4>
        </label>

        <input type="text" class="form-control" id="data-set-name-input" aria-describedby="data-set-name" placeholder="Data Set Name">
        <small id="data-set-name-help" class="form-text text-muted">Please provide unique names for all your data sets.</small>
      </div>

      <label for="label-cluster">
        <h4>
          Description
        </h4>
      </label>

      <div id="jsoneditor-data-set" class="pt-3 pb-4" style="width: 100%; height: 70%;"></div>

    </div>

    <div class="col col-lg-1 col-md-1 vertical-separator" style="height: 100%; border-left: 1px dotted black; height: 80vh; transform: translate(50%);"></div>

    <div class="col col-lg-7 col-md-7">

      <label for="label-cluster">
        <h4>
          All Data Sets
        </h4>
      </label>

      <table class="table table-bordered table-hover table-light custom-table-color text-center" id="data-sets-table" class="display" style="max-height: 30%">
      </table>
    </div>

  </div>
</div>

<div id="loading-screen-animation" style="display: none">
  <canvas id="c"></canvas>
  <div class="info">Click to add gravity point.</div>
</div>


<script>
    let containerDataSet = document.getElementById("jsoneditor-data-set");
    let options = {
        mode: "code"
    };
    let editorDataSet = new JSONEditor(containerDataSet, options);



    $(function () {
        const dummyDataSetUrl = "/dummy/data_set";

        axios.get(dummyDataSetUrl).then(function (response) {
            editorDataSet.set(response.data);
        });

        $('#data-sets-table').DataTable({
            ajax: '/data_sets/get_all_data_sets',
            select: true,
            columns: [
                {title: 'Name', data: 'name'},
                {title: 'Created At', data: 'created_at'},
                {title: 'Actions',
                    data: null,
                    render:
                        function ( data, type, row ) {
                          let tableButtonsToBeRenderer = '<button type="button" class="btn btn-info btn-sm" onclick="showDataSetInfo(' + data.id + ')"><i class="fas fa-eye"></i></button>';
                          tableButtonsToBeRenderer += '&nbsp;&nbsp;<button type="button" class="btn btn-danger btn-sm"onclick="deleteDataSet(' + data.id + ')"><i class="fas fa-trash"></i></button>';
                          return tableButtonsToBeRenderer;}}
            ],
            order: [['1', 'desc']]
        });
    });

    function callDeleteDataSet(url, dataSetId) {
        return axios
            .post(url, {
                data_set_id: dataSetId
            })
            .then(function (response) {
                return response;
            })
            .catch(function (error) {
                swal({
                    icon: "error",
                    text: "Error!"
                });
            });
    }

    function callDataSetGenerator(url, dataSetJson, dataSetName) {
        return axios
            .post(url, {
                payload_data_set: dataSetJson,
                payload_data_set_name: dataSetName
            })
            .then(function (response) {
                return response;
            })
            .catch(function (error) {
                swal({
                    icon: "error",
                    text: "Error!"
                });
            });
    }

    $("#button-create-new-data-set").click(function () {
        let dataSetJson = editorDataSet.get();
        let dataSetName = $('#data-set-name-input').val();

        if (jQuery.isEmptyObject(dataSetJson)) {
            swal({
                icon: "error",
                text: "Please fill in data set details."
            });
        } else if (dataSetName == undefined || dataSetName == "") {
            swal({
                icon: "error",
                text: "Please fill in data set name."
            });
        } else {
            let checkIfDataSetNameIsUsedUrl = '/data_sets/check_if_data_set_name_is_used';

            axios.get(checkIfDataSetNameIsUsedUrl, {
                params: {
                    data_set_name: dataSetName
                }
            }).then(function (response) {
                if (response.data == true) {
                    swal({
                        icon: "error",
                        text: "Data Set name is not unique. Please change it."
                    });
                } else {
                    const postUrl = "data_sets/create_new_data_set";
                    startLoadingScreenAnimation();

                    callDataSetGenerator(postUrl, dataSetJson, dataSetName).then(function (response) {
                        stopLoadingScreenAnimation();
                        location.reload();

                    }).catch(function (response) {
                        stopLoadingScreenAnimation();
                        console.log("error");
                        swal({
                            icon: "error",
                            text: "Internal server error."
                        });
                    });
                }
            });

        }
    });

    function showDataSetInfo(data_set_id) {

        let getDataSetUrl = "/data_sets/data_set";

        axios.get(getDataSetUrl, { params: {
                data_set_id: data_set_id
            }
        }).then(function (response) {

            const wrapper = document.createElement('div');
            wrapper.innerHTML = '<form>\n' +
                '  <div class="form-group">\n' +
                '    <label>Name</label>\n' +
                '    <input disabled type="text" class="form-control" value="'+ response.data.name + '">\n' +
                '  </div>\n' +
                '  <div class="form-group">\n' +
                '    <label>Created At</label>\n' +
                '    <input disabled type="text" class="form-control" value="'+ response.data.created_at + '">\n' +
                '  </div>\n' +
                '  <div class="form-group">\n' +
                '    <label>JSON Description</label>\n' +
                '    <textarea class="form-control data-set-details-description" rows="16" disabled></textarea>' +
                '  </div>\n' +
                '</form>';

            console.log(wrapper);

            let tempString = JSON.stringify(JSON.parse(response.data.raw_json), null, 2);

            console.log(tempString);

            wrapper.getElementsByClassName('data-set-details-description')[0].value = tempString;

            swal('Data Set Details', '', 'info', {
                type: 'info',
                showCloseButton: true,
                content: wrapper
            });

            console.log(response.data);
        });


    }

    function deleteDataSet(data_set_id) {
        swal("Are you sure that you want to delete this data set?", {
            buttons: {
                cancel: "No! Take me back to safety!",
                catch: {
                    text: "Delete!",
                    value: "catch",
                }
            },
        })
            .then((value) => {
                switch (value) {
                    case "catch":

                        const deleteDataSetUrl = "data_sets/delete_data_set";

                        callDeleteDataSet(deleteDataSetUrl, data_set_id).then(function (response) {
                            swal("Data set deleted!", "", "success").then((value) => {
                               location.reload();
                            });
                        }).catch(function (response) {
                            console.log("error");
                            swal({
                                icon: "error",
                                text: "Internal server error."
                            });
                        });

                        break;
                }
            });
    }
</script>



