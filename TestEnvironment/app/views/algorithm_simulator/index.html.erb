<style>
  #warning {
    background: #c14328;
    font-family: "Arial", sans-serif;
  }

  #warning .warningContent {
    position: absolute;
    top: 50%;
    left: 50%;
    margin: -40px 0px 0px -170px;
    display: block;
    width: 380px;
    height: 80px;
    color: black;
    text-shadow: -1px -1px #a63922;
  }

  #warning .warningContent span {
    font-size: 81px;
    font-weight: bold;
    line-height: 93px;
    display: block;
    width: 20px;
    float: left;
    margin-right: 5px;
  }

  #warning .warningContent .wHeading {
    font-size: 38px;
    font-weight: bold;
    line-height: 45px;
    margin: 0px;
    letter-spacing: -2px;
  }

  #warning .warningContent p {
    font-size: 14px;
    font-weight: regular;
    line-height: 16px;
    letter-spacing: 0px;
    margin: 0px;
    padding: 0px;
  }

  #warning .warningContent p a {
    font-size: 14px;
    font-weight: regular;
    color: #ff5559;
    text-decoration: underline;
  }
</style>

<div class="row justify-content-md-center">
  <div class="row col col-lg-12 col-md-12">
    <h1 class="p-3 pb-5">Test Load Balancing Algorithms</h1>
  </div>

  <div class="row col col-lg-12 col-md-12 pb-3">
    <div class="col col-lg-4 col-md-4">

      <button type="button" class="btn btn-outline-primary btn-lg" id="button-start-simulation">Start Simulation
      </button>
      <br>
      <br>

      <label for="label-cluster">
        <h5>
          Algorithm & Data Set
        </h5>
      </label>

      <div class="row" style="padding-left: 5%">
        <%= select_tag :selector_algorithm, options_for_select(@algorithms), :class => "form-control", :style => "width:40%;", :include_blank => "Algorithm..." %>
        <div style="width: 10%"></div>
        <%= select_tag :selector_data_set, options_for_select(@data_sets), :class => "form-control", :style => "width:40%;", :onchange => "triggerDataSetTooltipUpdate();", :include_blank => "Data Set..." %>
        <i id="data_set_tooltip" class="fas fa-info-circle"></i>

      </div>
      <br>

      <label for="label-cluster">
        <h4>
          Cluster Builder
        </h4>
      </label>

      <div id="jsoneditor-cluster" class="pt-3 pb-4" style="width: 100%; height: 35%;"></div>

      <label for="label-jobs">
        <h4>
          Simulation Description
        </h4>
      </label>

      <div id="jsoneditor-simulation" class="pt-3 pb-4" style="width: 100%; height: 35%;"></div>

    </div>

    <div class="col col-lg-1 col-md-1 vertical-separator" style="height: 100%; border-left: 1px dotted black; height: 80vh; transform: translate(50%);"></div>

    <div class="col col-lg-7 col-md-7">
      <label for="label-cluster">
        <h4>
          Results
        </h4>
      </label>

      <div id="results">
        <section id="warning">
          <section class="warningContent">
            <span>!</span>
            <h5 class="wHeading">Zero results</h5>
            <p>In order to display some <strong>results</strong> you should run a simulation!</p>
          </section>
        </section>
      </div>
    </div>
  </div>


</div>

<div id="loading-screen-animation" style="display: none">
  <canvas id="c"></canvas>
  <div class="info">Click to add gravity point.</div>
</div>


<%= render 'statistics' %>


<script>
    let containerCluster = document.getElementById("jsoneditor-cluster");
    let containerSimulation = document.getElementById("jsoneditor-simulation");
    let options = {
        mode: "code"
    };
    let editorCluster = new JSONEditor(containerCluster, options);
    let editorSimulation = new JSONEditor(containerSimulation, options);

    $(function () {
        const dummyClusterJsonUrl = "/dummy/cluster";
        const dummySimulationJsonUrl = "/dummy/simulation";

        axios.get(dummyClusterJsonUrl).then(function (response) {
            editorCluster.set(response.data);
        });

        axios.get(dummySimulationJsonUrl).then(function (response) {
            editorSimulation.set(response.data);
        });

        $('#modalStatistics').modal({show: false})
    });

    function callSimulation(url, clusterJson, simulationJson, selectedAlgorithm, selectedDataSet) {
        return axios
            .post(url, {
                payload_cluster: clusterJson,
                payload_simulation: simulationJson,
                simulated_algorithm: selectedAlgorithm,
                data_set: selectedDataSet
            })
            .then(function (response) {
                return response;
            })
            .catch(function (error) {
                swal({
                    icon: "error",
                    text: "Error!"
                });
            });
    }

    $("#button-start-simulation").click(function () {
        let clusterJson = editorCluster.get();
        let simulationJson = editorSimulation.get();
        let selectedAlgorithm = $("#selector_algorithm :selected").val();
        let selectedDataSet = $('#selector_data_set :selected').val();

        if (jQuery.isEmptyObject(clusterJson)) {
            swal({
                icon: "error",
                text: "Please fill in cluster details."
            });
        } else if (jQuery.isEmptyObject(simulationJson)) {
            swal({
                icon: "error",
                text: "Please fill in simulation details."
            });
        } else if (selectedAlgorithm === undefined || selectedAlgorithm === "") {
            swal({
                icon: "error",
                text: "Please selected one algorithm that should be tested."
            });
        } else {
            const postUrl = "/simulate";
            startLoadingScreenAnimation();

            callSimulation(postUrl, clusterJson, simulationJson, selectedAlgorithm, selectedDataSet).then(function (response) {
                stopLoadingScreenAnimation();

                //popResultsModal(response.data.table.simulation)

            }).catch(function (response) {
                stopLoadingScreenAnimation();
                console.log("error");
                swal({
                    icon: "error",
                    text: "Internal server error."
                });
            });

        }

    });

    let tippyInstance = null;

    function getDataSet(url, dataSetId) {
        return axios
            .get(url, {
                data_set_id: dataSetId
            })
            .then(function (response) {
                return response;
            })
            .catch(function (error) {
            });
    }

    function triggerDataSetTooltipUpdate() {
        let value = $("#selector_data_set").val();
        let getDataSetUrl = "/data_sets/data_set";

        console.log(value);

        if (!isNaN(value)) {

            axios.get(getDataSetUrl, {
                params: {
                    data_set_id: value
                }
            }).then(function (response) {

                if (tippyInstance == null) {
                    tippyInstance = tippy('#data_set_tooltip', {content: response.data.raw_json, placement: 'right'});
                } else {
                    tippyInstance[0].setContent(response.data.raw_json);
                }
            });
        } else {
            if (tippyInstance == null) {
                tippyInstance = tippy('#data_set_tooltip', {content: '', placement: 'right'});
            } else {
                tippyInstance[0].setContent('');
            }
        }
    }

</script>


<script src="https://unpkg.com/tippy.js@4"></script>
<script src="https://unpkg.com/popper.js@1"></script>
